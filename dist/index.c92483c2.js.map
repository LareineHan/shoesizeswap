{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCgLA,EAAA,MAAA,CAAA,EAAA,iBAAA,IACC,GADD,EAAA,MAAA,CAAA,EAAA,gBAAA,IAvHA,SAAS,EAAc,CAAM,CAAE,CAAe,EAC7C,IAAI,EAAgB,SAAS,sBAAsB,CAAC,EAAgB,CAAC,EAAE,AAEvE,CAAA,EAAc,SAAS,CAAG,GAE1B,IAAI,EAAQ,EAAkB,GAC1B,GACH,EAAM,OAAO,CAAC,AAAC,IACd,IAAI,EAAS,SAAS,aAAa,CAAC,SACpC,CAAA,EAAO,SAAS,CAAG,EACnB,EAAO,KAAK,CAAG,EACf,EAAO,gBAAgB,CAAC,QAAS,WAIhC,AAHkB,SAAS,gBAAgB,CAC1C,kCAEW,OAAO,CAAC,AAAC,IACpB,EAAO,SAAS,CAAC,MAAM,CAAC,SAAU,IAAW,IAAI,CAClD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","sources":["<anon>","src/js/converter.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"32kUO\":[function(require,module,exports) {\n// sizeConverter.js\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"setDefaultSize\", ()=>setDefaultSize);\nparcelHelpers.export(exports, \"populateSizes\", ()=>populateSizes);\nparcelHelpers.export(exports, \"convertSize\", ()=>convertSize);\nparcelHelpers.export(exports, \"getSizesForRegion\", ()=>getSizesForRegion);\nparcelHelpers.export(exports, \"convert\", ()=>convert);\nvar _sizesJs = require(\"./sizes.js\"); // Import the sizesData from sizes.js\nvar _sizesJsDefault = parcelHelpers.interopDefault(_sizesJs);\nlet selectedSize = 0;\nfunction setDefaultSize() {\n    let defaultRegion = (0, _sizesJsDefault.default)[0].region;\n    let defaultSize = (0, _sizesJsDefault.default)[0].sizes[5];\n    document.getElementById(\"output\").innerHTML = \"Choose 'To'.\";\n    console.log(defaultRegion, defaultSize);\n    // Set the default size button as active\n    let sizeButtons = document.querySelectorAll(\".size-buttons-container button\");\n    sizeButtons.forEach((button)=>{\n        if (parseFloat(button.value) === defaultSize) {\n            button.classList.add(\"active\");\n            selectedSize = defaultSize;\n        } else button.classList.remove(\"active\");\n    });\n}\nfunction convertSize(sourceSize, sourceRegion, targetRegion) {\n    // Find the source region object in sizesData\n    const sourceRegionObj = (0, _sizesJsDefault.default).find((region)=>region.region === sourceRegion);\n    // Find the target region object in sizesData\n    const targetRegionObj = (0, _sizesJsDefault.default).find((region)=>region.region === targetRegion);\n    console.log(\"\\uC18C\\uC2A4\\uC9C0\\uC5ED:\", sourceRegionObj, \"\\uD0C0\\uAC9F\\uC9C0\\uC5ED:\", targetRegionObj);\n    if (sourceRegionObj && targetRegionObj) {\n        // Find the index of the source size in the source region's sizes array\n        const sourceSizeIndex = sourceRegionObj.sizes.findIndex((size)=>size === sourceSize);\n        if (sourceSizeIndex !== -1) {\n            // if (sourceSizeIndex !== -1) {\n            // Get the size from the target region's sizes array at the same index\n            const targetSize = targetRegionObj.sizes[sourceSizeIndex];\n            if (targetSize) return targetSize;\n        }\n    }\n}\n// 1. pupulateSizes will remove the existing buttons in the container\n//    and add new buttons based on the selected region.\n// 2. The selected size is set to 0 and the convert function is called.\nfunction populateSizes(region, targetElementId) {\n    let targetElement = document.getElementsByClassName(targetElementId)[0];\n    // targetElement is the container for the size buttons for the selected region\n    targetElement.innerHTML = \"\";\n    let sizes = getSizesForRegion(region); // source region sizes array\n    if (sizes) sizes.forEach((size)=>{\n        let button = document.createElement(\"button\");\n        button.innerHTML = size;\n        button.value = size;\n        button.addEventListener(\"click\", function() {\n            let sizeButtons = document.querySelectorAll(\".size-buttons-container button\");\n            sizeButtons.forEach((button)=>{\n                button.classList.toggle(\"active\", button === this);\n            });\n            selectedSize = parseFloat(this.value); // Assign the selected size as a float value\n            convert(); // Call the convert function\n        });\n        targetElement.appendChild(button);\n    });\n    setDefaultSize();\n    // Add a refresh button\n    let refreshButton = document.createElement(\"button\");\n    //  refreshButton.classList.add('btn', 'refreshBtn', 'btn-lg');\n    refreshButton.innerHTML = \"\\u21BB\";\n    refreshButton.addEventListener(\"click\", function() {\n        let sizeButtons = document.querySelectorAll(\".size-buttons-container button\");\n        sizeButtons.forEach((button)=>{\n            button.classList.remove(\"active\");\n        });\n        selectedSize = 0; // Reset selected size to default\n        let sourceRegionSelect = document.getElementById(\"source_region\");\n        let targetRegionSelect = document.getElementById(\"target_region\");\n        let output = document.getElementById(\"output\");\n        sourceRegionSelect.selectedIndex = 0; // Set source_region to default (index 0)\n        targetRegionSelect.selectedIndex = 0; // Set target_region to default (index 0)\n        output.innerHTML = \"\"; // Clear output\n        populateSizes(sourceRegionSelect.value, \"size-button\");\n    });\n    targetElement.appendChild(refreshButton);\n    // Set the default option for target_region based on source_region\n    let targetRegionSelect = document.getElementById(\"target_region\");\n    let sourceRegion = document.getElementById(\"source_region\").value;\n    let defaultOption = new Option(\"Select\", \"\");\n    targetRegionSelect.innerHTML = \"\"; // Clear existing options\n    targetRegionSelect.add(defaultOption);\n    if (sourceRegion !== \"\") {\n        // If source region exists\n        let targetRegions = getTargetRegions(sourceRegion);\n        targetRegions.forEach((region)=>{\n            let option = new Option(region, region);\n            targetRegionSelect.add(option);\n        });\n    // Add default option\n    }\n}\nfunction getTargetRegions(sourceRegion) {\n    const targetRegions = {\n        \"US(M)\": [\n            \"US(W)\",\n            \"UK\",\n            \"EU\",\n            \"KOREA\",\n            \"JAPAN\"\n        ],\n        \"US(W)\": [\n            \"US(M)\",\n            \"UK\",\n            \"EU\",\n            \"KOREA\",\n            \"JAPAN\"\n        ],\n        UK: [\n            \"US(M)\",\n            \"US(W)\",\n            \"EU\",\n            \"KOREA\",\n            \"JAPAN\"\n        ],\n        KOREA: [\n            \"US(M)\",\n            \"US(W)\",\n            \"UK\",\n            \"EU\",\n            \"JAPAN\"\n        ],\n        JAPAN: [\n            \"US(M)\",\n            \"US(W)\",\n            \"UK\",\n            \"EU\",\n            \"KOREA\"\n        ],\n        EU: [\n            \"US(M)\",\n            \"US(W)\",\n            \"UK\",\n            \"KOREA\",\n            \"JAPAN\"\n        ]\n    };\n    return targetRegions[sourceRegion] || [];\n}\nfunction getSizesForRegion(region) {\n    const sizes = (0, _sizesJsDefault.default).find((data)=>data.region === region);\n    if (sizes) return sizes.sizes;\n    else return [];\n}\nfunction convert() {\n    let sourceRegion = document.getElementById(\"source_region\").value;\n    let targetRegion = document.getElementById(\"target_region\").value;\n    let chosenSize = document.querySelector(\".size-buttons-container button.active\").innerHTML;\n    let selectedSize = parseFloat(chosenSize); // Assign the selected size as a number\n    console.log(\"sourceRegion:\", sourceRegion, \"targetRegion:\", targetRegion, \"selectedSize:\", selectedSize, typeof selectedSize // typeof selectedSize is number\n    );\n    if (!targetRegion) {\n        alert('error: Please select \"To\" area');\n        return;\n    }\n    let convertedSize = convertSize(selectedSize, sourceRegion, targetRegion);\n    if (isNaN(convertedSize)) document.getElementById(\"output\").innerHTML = \"Please select 'To' area\";\n    else document.getElementById(\"output\").innerHTML = \"Size \" + convertedSize + \" in \" + targetRegion;\n}\n\n},{\"./sizes.js\":\"2rRka\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"7rhan\"}]},[\"32kUO\"], \"32kUO\", \"parcelRequire0664\")\n\n//# sourceMappingURL=index.c92483c2.js.map\n","// sizeConverter.js\nimport sizesData from './sizes.js'; // Import the sizesData from sizes.js\n\nlet selectedSize = 0;\n\nfunction setDefaultSize() {\n\tlet defaultRegion = sizesData[0].region;\n\tlet defaultSize = sizesData[0].sizes[5];\n\tdocument.getElementById('output').innerHTML = \"Choose 'To'.\";\n\tconsole.log(defaultRegion, defaultSize);\n\t// Set the default size button as active\n\tlet sizeButtons = document.querySelectorAll('.size-buttons-container button');\n\n\tsizeButtons.forEach((button) => {\n\t\tif (parseFloat(button.value) === defaultSize) {\n\t\t\tbutton.classList.add('active');\n\t\t\tselectedSize = defaultSize;\n\t\t} else {\n\t\t\tbutton.classList.remove('active');\n\t\t}\n\t});\n}\n\nfunction convertSize(sourceSize, sourceRegion, targetRegion) {\n\t// Find the source region object in sizesData\n\tconst sourceRegionObj = sizesData.find(\n\t\t(region) => region.region === sourceRegion\n\t);\n\n\t// Find the target region object in sizesData\n\tconst targetRegionObj = sizesData.find(\n\t\t(region) => region.region === targetRegion\n\t);\n\n\tconsole.log('소스지역:', sourceRegionObj, '타겟지역:', targetRegionObj);\n\n\tif (sourceRegionObj && targetRegionObj) {\n\t\t// Find the index of the source size in the source region's sizes array\n\t\tconst sourceSizeIndex = sourceRegionObj.sizes.findIndex(\n\t\t\t(size) => size === sourceSize\n\t\t);\n\n\t\tif (sourceSizeIndex !== -1) {\n\t\t\t// if (sourceSizeIndex !== -1) {\n\t\t\t// Get the size from the target region's sizes array at the same index\n\t\t\tconst targetSize = targetRegionObj.sizes[sourceSizeIndex];\n\t\t\tif (targetSize) {\n\t\t\t\treturn targetSize;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// 1. pupulateSizes will remove the existing buttons in the container\n//    and add new buttons based on the selected region.\n// 2. The selected size is set to 0 and the convert function is called.\n\nfunction populateSizes(region, targetElementId) {\n\tlet targetElement = document.getElementsByClassName(targetElementId)[0];\n\t// targetElement is the container for the size buttons for the selected region\n\ttargetElement.innerHTML = '';\n\n\tlet sizes = getSizesForRegion(region); // source region sizes array\n\tif (sizes) {\n\t\tsizes.forEach((size) => {\n\t\t\tlet button = document.createElement('button');\n\t\t\tbutton.innerHTML = size;\n\t\t\tbutton.value = size;\n\t\t\tbutton.addEventListener('click', function () {\n\t\t\t\tlet sizeButtons = document.querySelectorAll(\n\t\t\t\t\t'.size-buttons-container button'\n\t\t\t\t);\n\t\t\t\tsizeButtons.forEach((button) => {\n\t\t\t\t\tbutton.classList.toggle('active', button === this);\n\t\t\t\t});\n\n\t\t\t\tselectedSize = parseFloat(this.value); // Assign the selected size as a float value\n\t\t\t\tconvert(); // Call the convert function\n\t\t\t});\n\t\t\ttargetElement.appendChild(button);\n\t\t});\n\t}\n\tsetDefaultSize();\n\n\t// Add a refresh button\n\tlet refreshButton = document.createElement('button');\n\t//  refreshButton.classList.add('btn', 'refreshBtn', 'btn-lg');\n\trefreshButton.innerHTML = '↻';\n\trefreshButton.addEventListener('click', function () {\n\t\tlet sizeButtons = document.querySelectorAll(\n\t\t\t'.size-buttons-container button'\n\t\t);\n\t\tsizeButtons.forEach((button) => {\n\t\t\tbutton.classList.remove('active');\n\t\t});\n\t\tselectedSize = 0; // Reset selected size to default\n\t\tlet sourceRegionSelect = document.getElementById('source_region');\n\t\tlet targetRegionSelect = document.getElementById('target_region');\n\t\tlet output = document.getElementById('output');\n\t\tsourceRegionSelect.selectedIndex = 0; // Set source_region to default (index 0)\n\t\ttargetRegionSelect.selectedIndex = 0; // Set target_region to default (index 0)\n\t\toutput.innerHTML = ''; // Clear output\n\t\tpopulateSizes(sourceRegionSelect.value, 'size-button');\n\t});\n\ttargetElement.appendChild(refreshButton);\n\n\t// Set the default option for target_region based on source_region\n\tlet targetRegionSelect = document.getElementById('target_region');\n\tlet sourceRegion = document.getElementById('source_region').value;\n\tlet defaultOption = new Option('Select', '');\n\ttargetRegionSelect.innerHTML = ''; // Clear existing options\n\ttargetRegionSelect.add(defaultOption);\n\n\tif (sourceRegion !== '') {\n\t\t// If source region exists\n\t\tlet targetRegions = getTargetRegions(sourceRegion);\n\t\ttargetRegions.forEach((region) => {\n\t\t\tlet option = new Option(region, region);\n\t\t\ttargetRegionSelect.add(option);\n\t\t});\n\t\t// Add default option\n\t}\n}\nfunction getTargetRegions(sourceRegion) {\n\tconst targetRegions = {\n\t\t'US(M)': ['US(W)', 'UK', 'EU', 'KOREA', 'JAPAN'],\n\t\t'US(W)': ['US(M)', 'UK', 'EU', 'KOREA', 'JAPAN'],\n\t\tUK: ['US(M)', 'US(W)', 'EU', 'KOREA', 'JAPAN'],\n\t\tKOREA: ['US(M)', 'US(W)', 'UK', 'EU', 'JAPAN'],\n\t\tJAPAN: ['US(M)', 'US(W)', 'UK', 'EU', 'KOREA'],\n\t\tEU: ['US(M)', 'US(W)', 'UK', 'KOREA', 'JAPAN'],\n\t};\n\n\treturn targetRegions[sourceRegion] || [];\n}\n\nfunction getSizesForRegion(region) {\n\tconst sizes = sizesData.find((data) => data.region === region);\n\n\tif (sizes) {\n\t\treturn sizes.sizes;\n\t} else return [];\n}\n\nfunction convert() {\n\tlet sourceRegion = document.getElementById('source_region').value;\n\tlet targetRegion = document.getElementById('target_region').value;\n\tlet chosenSize = document.querySelector(\n\t\t'.size-buttons-container button.active'\n\t).innerHTML;\n\tlet selectedSize = parseFloat(chosenSize); // Assign the selected size as a number\n\tconsole.log(\n\t\t'sourceRegion:',\n\t\tsourceRegion,\n\t\t'targetRegion:',\n\t\ttargetRegion,\n\t\t'selectedSize:',\n\t\tselectedSize,\n\t\ttypeof selectedSize // typeof selectedSize is number\n\t);\n\n\tif (!targetRegion) {\n\t\talert('error: Please select \"To\" area');\n\t\treturn;\n\t}\n\n\tlet convertedSize = convertSize(selectedSize, sourceRegion, targetRegion);\n\n\tif (isNaN(convertedSize)) {\n\t\tdocument.getElementById('output').innerHTML = \"Please select 'To' area\";\n\t} else {\n\t\tdocument.getElementById('output').innerHTML =\n\t\t\t'Size ' + convertedSize + ' in ' + targetRegion;\n\t}\n}\n\nexport {\n\tsetDefaultSize,\n\tpopulateSizes,\n\tconvertSize,\n\tgetSizesForRegion,\n\tconvert,\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","setDefaultSize","populateSizes","region","targetElementId","targetElement","document","getElementsByClassName","innerHTML","sizes","getSizesForRegion","forEach","size","button","createElement","value","addEventListener","sizeButtons","querySelectorAll","classList","toggle","parseFloat","convert","appendChild","refreshButton","remove","sourceRegionSelect","getElementById","targetRegionSelect","output","selectedIndex","sourceRegion","defaultOption","Option","add","targetRegions","UK","KOREA","JAPAN","EU","option","convertSize","_sizesJs","_sizesJsDefault","interopDefault","defaultRegion","default","defaultSize","console","log","sourceSize","targetRegion","sourceRegionObj","find","targetRegionObj","sourceSizeIndex","findIndex","targetSize","data","selectedSize","querySelector","alert","convertedSize","isNaN"],"version":3,"file":"index.c92483c2.js.map"}