{"mappings":"I,E,E,E,E,E,C,E,E,C,E,O,E,C,E,Y,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,U,C,I,I,E,I,K,E,W,C,E,a,C,C,G,I,E,E,S,E,E,SC0CA,SAAS,IACR,IAAI,EAAe,SAAS,cAAc,CAAC,iBAAiB,KAAK,CAC7D,EAAe,SAAS,cAAc,CAAC,iBAAiB,KAAK,CAI7D,EAAe,WAHF,SAAS,aAAa,CACtC,yCACC,SAAS,EAYX,GAVA,QAAQ,GAAG,CACV,gBACA,EACA,gBACA,EACA,gBACA,EACA,OAAO,GAGJ,CAAC,EAAc,CAClB,MAAM,kCACN,MACD,CAEA,IAAI,EAAgB,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,EAAY,EAAc,EAAc,GAExD,MAAM,GACT,SAAS,cAAc,CAAC,UAAU,SAAS,CAAG,0BAE9C,SAAS,cAAc,CAAC,UAAU,SAAS,CAC1C,QAAU,EAAgB,OAAS,CAEtC,CA5DA,SAAS,gBAAgB,CAAC,mBAAoB,KAC7C,AAAA,CAAA,EAAA,EAAA,cAAa,AAAb,IAGA,AAD2B,SAAS,cAAc,CAAC,iBAChC,gBAAgB,CAAC,SAAU,AAAC,IAC9C,IAAM,EAAiB,EAAM,MAAM,CAAC,KAAK,CACzC,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,EAAgB,cAC/B,GAGA,AAD2B,SAAS,cAAc,CAAC,iBAChC,gBAAgB,CAAC,SAAU,KAC7C,GACD,EACD,GAEA,OAAO,MAAM,CAAG,WACf,IAAI,EAAU,AAAA,CAAA,EAAA,EAAA,OAAQ,AAAR,EAAU,GAAG,CAAC,AAAC,GAAS,EAAK,MAAM,EAE7C,EAAqB,SAAS,cAAc,CAAC,iBAC7C,EAAqB,SAAS,cAAc,CAAC,iBAEjD,EAAQ,OAAO,CAAC,AAAC,IAChB,IAAI,EAAS,IAAI,OAAO,EAAQ,GAChC,EAAmB,GAAG,CAAC,GACvB,EAAmB,GAAG,CAAC,EAAO,SAAS,CAAC,CAAA,GACzC,GAEA,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,CAAO,CAAC,EAAE,CAAE,cAC3B,EAoCA,AAF2B,SAAS,cAAc,CAAC,iBAEhC,gBAAgB,CAAC,SAAU,WAC7C,IAAM,EAAiB,IAAI,CAAC,KAAK,CAC3B,EAAQ,AAAA,CAAA,EAAA,EAAA,iBAAgB,AAAhB,EAAkB,GAEhC,OADA,QAAQ,GAAG,CAAC,GACL,CACR,E,G,E","sources":["<anon>","script.js"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire0664\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire0664\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"g7uhW\", function(module, exports) {\n\n$parcel$export(module.exports, \"convert\", () => $bbc4cb72ffda9efa$export$9c68d69a4c5bbcf9);\n\nvar $fWLGp = parcelRequire(\"fWLGp\");\n\nvar $4JiRG = parcelRequire(\"4JiRG\");\n//console.log('This is from script.js', sizesData);\nlet $bbc4cb72ffda9efa$var$selectedSize = 0;\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    (0, $4JiRG.setDefaultSize)();\n    const sourceRegionSelect = document.getElementById(\"source_region\");\n    sourceRegionSelect.addEventListener(\"change\", (event)=>{\n        const selectedRegion = event.target.value;\n        (0, $4JiRG.populateSizes)(selectedRegion, \"size-button\");\n    });\n    const targetRegionSelect = document.getElementById(\"target_region\");\n    targetRegionSelect.addEventListener(\"change\", ()=>{\n        $bbc4cb72ffda9efa$export$9c68d69a4c5bbcf9();\n    });\n});\nwindow.onload = function() {\n    let regions = (0, $fWLGp.default).map((data)=>data.region);\n    let sourceRegionSelect = document.getElementById(\"source_region\");\n    let targetRegionSelect = document.getElementById(\"target_region\");\n    regions.forEach((region)=>{\n        let option = new Option(region, region);\n        sourceRegionSelect.add(option);\n        targetRegionSelect.add(option.cloneNode(true)); // Clone the option for the target_region select element\n    });\n    (0, $4JiRG.populateSizes)(regions[0], \"size-button\"); // Default buttons for the first region\n};\nfunction $bbc4cb72ffda9efa$export$9c68d69a4c5bbcf9() {\n    let sourceRegion = document.getElementById(\"source_region\").value;\n    let targetRegion = document.getElementById(\"target_region\").value;\n    let chosenSize = document.querySelector(\".size-buttons-container button.active\").innerHTML;\n    let selectedSize = parseFloat(chosenSize); // Assign the selected size as a number\n    console.log(\"sourceRegion:\", sourceRegion, \"targetRegion:\", targetRegion, \"selectedSize:\", selectedSize, typeof selectedSize // typeof selectedSize is number\n    );\n    if (!targetRegion) {\n        alert('error: Please select \"To\" area');\n        return;\n    }\n    let convertedSize = (0, $4JiRG.convertSize)(selectedSize, sourceRegion, targetRegion);\n    if (isNaN(convertedSize)) document.getElementById(\"output\").innerHTML = \"Please select 'To' area\";\n    else document.getElementById(\"output\").innerHTML = \"Size \" + convertedSize + \" in \" + targetRegion;\n}\nconst $bbc4cb72ffda9efa$var$targetRegionSelect = document.getElementById(\"target_region\");\n$bbc4cb72ffda9efa$var$targetRegionSelect.addEventListener(\"change\", function() {\n    const selectedRegion = this.value;\n    const sizes = (0, $4JiRG.getSizesForRegion)(selectedRegion);\n    console.log(sizes); // or perform any other desired action\n    return sizes;\n});\n\n});\n\n\nparcelRequire(\"g7uhW\");\n})();\n//# sourceMappingURL=index.6c4b95b0.js.map\n","import sizesData from './sizes.js';\nimport {\n\tsetDefaultSize,\n\tpopulateSizes,\n\tconvertSize,\n\tgetSizesForRegion,\n} from './converter.js';\n\n//console.log('This is from script.js', sizesData);\n\nlet selectedSize = 0;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\tsetDefaultSize();\n\n\tconst sourceRegionSelect = document.getElementById('source_region');\n\tsourceRegionSelect.addEventListener('change', (event) => {\n\t\tconst selectedRegion = event.target.value;\n\t\tpopulateSizes(selectedRegion, 'size-button');\n\t});\n\n\tconst targetRegionSelect = document.getElementById('target_region');\n\ttargetRegionSelect.addEventListener('change', () => {\n\t\tconvert();\n\t});\n});\n\nwindow.onload = function () {\n\tlet regions = sizesData.map((data) => data.region);\n\n\tlet sourceRegionSelect = document.getElementById('source_region');\n\tlet targetRegionSelect = document.getElementById('target_region');\n\n\tregions.forEach((region) => {\n\t\tlet option = new Option(region, region);\n\t\tsourceRegionSelect.add(option);\n\t\ttargetRegionSelect.add(option.cloneNode(true)); // Clone the option for the target_region select element\n\t});\n\n\tpopulateSizes(regions[0], 'size-button'); // Default buttons for the first region\n};\n\nfunction convert() {\n\tlet sourceRegion = document.getElementById('source_region').value;\n\tlet targetRegion = document.getElementById('target_region').value;\n\tlet chosenSize = document.querySelector(\n\t\t'.size-buttons-container button.active'\n\t).innerHTML;\n\tlet selectedSize = parseFloat(chosenSize); // Assign the selected size as a number\n\tconsole.log(\n\t\t'sourceRegion:',\n\t\tsourceRegion,\n\t\t'targetRegion:',\n\t\ttargetRegion,\n\t\t'selectedSize:',\n\t\tselectedSize,\n\t\ttypeof selectedSize // typeof selectedSize is number\n\t);\n\n\tif (!targetRegion) {\n\t\talert('error: Please select \"To\" area');\n\t\treturn;\n\t}\n\n\tlet convertedSize = convertSize(selectedSize, sourceRegion, targetRegion);\n\n\tif (isNaN(convertedSize)) {\n\t\tdocument.getElementById('output').innerHTML = \"Please select 'To' area\";\n\t} else {\n\t\tdocument.getElementById('output').innerHTML =\n\t\t\t'Size ' + convertedSize + ' in ' + targetRegion;\n\t}\n}\n\nconst targetRegionSelect = document.getElementById('target_region');\n\ntargetRegionSelect.addEventListener('change', function () {\n\tconst selectedRegion = this.value;\n\tconst sizes = getSizesForRegion(selectedRegion);\n\tconsole.log(sizes); // or perform any other desired action\n\treturn sizes;\n});\n\nexport { convert };\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","globalThis","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$bbc4cb72ffda9efa$export$9c68d69a4c5bbcf9","set","s","enumerable","configurable","$fWLGp","$4JiRG","sourceRegion","document","getElementById","value","targetRegion","selectedSize","parseFloat","querySelector","innerHTML","console","log","alert","convertedSize","convertSize","isNaN","addEventListener","setDefaultSize","sourceRegionSelect","event","selectedRegion","target","populateSizes","targetRegionSelect","window","onload","regions","default","map","data","region","forEach","option","Option","add","cloneNode","$bbc4cb72ffda9efa$var$targetRegionSelect","sizes","getSizesForRegion"],"version":3,"file":"index.6c4b95b0.js.map","sourceRoot":"../"}